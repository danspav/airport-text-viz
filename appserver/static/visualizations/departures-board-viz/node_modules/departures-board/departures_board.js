class departures_board{
	constructor(num_characters, is_animated, timing, auto_refresh, auto_refresh_period, dark_tiles, size, force_all_caps){
		this.num_characters = num_characters;
		this.is_animated = is_animated;
		this.auto_refresh = auto_refresh;
		this.auto_refresh_period = auto_refresh_period;
		this.timing = timing;
		this.size = size;
		this.dark_tiles = dark_tiles;
		this.force_all_caps = force_all_caps;
		this.id = this.createUUID();
		this.caption="";
		
		this.words = [];
		
		this.dark_tiles = (this.dark_tiles=="true");
		this.auto_refresh = (this.auto_refresh=="true");
		this.is_animated = (this.is_animated=="true");
		this.timing = parseInt(this.timing,10);
		if(this.timing<1) { this.timing = 1;}
		var reValidateRefreshPeriod = new RegExp("\\d{1,3}(\\.\\d+)");
		if( reValidateRefreshPeriod.test(this.auto_refresh_period)!=true || this.auto_refresh_period <1){ this.auto_refresh_period = 5;}
	}
	
	setText(data){
			var SplunkVisUtils = require('api/SplunkVisualizationUtils');
			var vizUtils = require('api/SplunkVisualizationUtils');
			this.caption = ""
			var i = 0;
			
			try{
				//------------------------------  Get data row field indexes ----------------------------------------------------------------------
				
				for(i=0;i<data.rows.length();i++){
					// Set the key value pair:
					str = (this.force_all_caps) ? data.rows[i][0].toUpperCase : data.rows[i][0];
					val = (data.rows[0].length()>1) ? data.rows[0][1] : ""
					this.words.push ({word:str, value: val});
				}// loop
				
			} catch(err) {
				console.log("Error setting data. " + err);
			}
		}
	
	getHTML(){
		var styles = (this.dark_tiles) ? "header dark " + this.size : "header light " + this.size;
		var html = "<input class=\"" + styles +"\" id=\"" + this.id +"\" />";
		return html;
		
	}
	
	getNextWord(){
		vals = this.words.shift();
		this.words.push(vals);
		return vals["word"];
		// Save as token: vals["id"];
	}
	
	getOpts(){
		return {chars_preset: 'alphanum',
				align: 'left',
				width: this.num_characters,
				timing: this.timing
				//,transform: is_animated
			};
	}
	
	createUUID() {
		var s = [];
		var hexDigits = "0123456789abcdef";
		for (var i = 0; i < 10; i++) {
			s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
		}
		var uuid = s.join("");
		return "db_" + uuid;
	}
	
	start(){
		//const flap = require('flapper');
		var caption = this.caption;
		var id = this.id;
		var auto_refresh_period = this.auto_refresh_period;
		window.jQuery("#" + this.id).val(caption)
		window.jQuery("#" + this.id).flapper({
			width: this.size,
			chars_preset: 'alphanum',
			transform: this.is_animated,
			timing: this.timing
		});
		if(this.auto_refresh) {
			setTimeout(function(){
				setInterval(function(){
					window.jQuery("#" + this.id).val('').change();						
					setTimeout(function(){window.jQuery("#" + this.id).val(caption).change();},1000);
				}, auto_refresh_period * 1000);
			}, 1000);
		} // End if
	}
		
	
	
}
/*
$(document).ready(function() {
                var $el = $('#' + this.id);
                $el.flapper({
                    width: this.size,
                    chars_preset: 'alphanum',
					transform: this.animate,
					timing: this.timing
                });

                setTimeout(function(){
                    $el.val('FLAPPER').change();
                    var toggle = false;
                    setInterval(function(){
                        if (toggle) {
                            $el.val(this.caption).change();
                        } else {
                            $el.val('X' + this.caption).change();
                        }
                        toggle = !toggle;
                    }, 5000);
                }, 1000);
            });
			*/

	module.exports =  departures_board;

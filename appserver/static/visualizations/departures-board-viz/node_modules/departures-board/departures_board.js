class departures_board{
	constructor(){
		this.words = [];
		this.value = ""; // The value for token_id
		this.id = this.createUUID();
		this.caption = ""
		this.label="";
		this.max_num_characters = 50;	// Defined here - limit the num_chars of the viz
		//Defaults:
		this.num_characters = 5;
		this.auto_refresh = true;
		this.auto_refresh_period = 5;
		this.timing = 500;
		this.size = "XXL";
		this.dark_tiles = false;
		this.force_all_caps = true;
		this.token_word = "dbv_term";
		this.token_id = "dbv_id";
		this.is_fixed_length = false;
		this.align = "left";
		this.text_align="left"
		this.mvc = "";
		this.interval_handler = "";
	}
	
	
	
	setConfig(config, namespace, mvc){
		// Get Config parameters:
			this.num_characters = parseInt(config[namespace + 'num_characters']) || 5;
			if (this.num_characters > this.max_num_characters) { this.num_characters = this.max_num_characters;}
			this.auto_refresh = config[namespace + "auto_refresh"] || true;
			this.auto_refresh_period = parseInt(config[namespace + 'auto_refresh_period']) || 5;
			this.timing = parseInt(config[namespace + 'timing']) || 500;
			this.size = config[namespace + 'size'] || "XXL";;
			this.theme = config[namespace + "theme"] || "light";
			this.force_all_caps = config[namespace + "force_all_caps"] || true;
			this.label = config[namespace + "label"] || "";
			
			this.token_word = config[namespace + "token_term"] || "dbv_term";
			this.token_id = config[namespace + "token_id"] || "dbv_id";
			this.caption="";
			this.is_fixed_length = config[namespace + "is_fixed_length"] || false;
			this.align = config[namespace + "align"] || "left";
			this.text_align = config[namespace + "text_align"] || "left";
			
			this.force_all_caps = (this.force_all_caps=="true");
			this.theme = (this.theme=="light") ? "light" : "dark";
			this.auto_refresh = (this.auto_refresh=="true");
			this.is_animated = (this.is_animated=="true");
			this.is_fixed_length = (this.is_fixed_length=="true");
			if(!this.is_fixed_length){
				this.num_characters = 1;
			}
			this.timing = parseInt(this.timing,10);
			if(this.timing<1) { this.timing = 1;}
			
			this.mvc = mvc
			
			//Refresh period cannot be less than 1s
			var reValidateRefreshPeriod = new RegExp("\\d{1,3}(\\.\\d+)?");
			if( reValidateRefreshPeriod.test(this.auto_refresh_period)!=true || this.auto_refresh_period <1){ this.auto_refresh_period = 5;}
			
			//Timing mus be at least 100ms
			var reValidateAnimationPeriod = new RegExp("\\d{3,4}");
			if( reValidateAnimationPeriod.test(this.timing)!=true || this.timing <100){ this.timing = 500;}
	}
	
	
	
	
	setText(data){
			var SplunkVisUtils = require('api/SplunkVisualizationUtils');
			var vizUtils = require('api/SplunkVisualizationUtils');
			this.caption = ""
			var i = 0;
			var str = "";
			var val = "";
			try{
				//------------------------------  Get data row field indexes ----------------------------------------------------------------------
				
				for(i=0;i<data.rows.length;i++){
					// Set the key value pair:
					str = (this.force_all_caps) ? data.rows[i][0].toUpperCase() : data.rows[i][0];
					val = (data.rows[i].length>1) ? data.rows[i][1] : ""
					this.words.push ({word:str, value: val});
					if(!this.is_fixed_length && str.length > this.num_characters){ 
						//Limit the length to this.max_num_characters
						if (str.length <= this.max_num_characters){ 
							this.num_characters = str.length;
						}else{
							this.num_characters = this.max_num_characters;
						}
					}
				}// loop
				
			} catch(err) {
				console.log("Error setting data. " + err);
			}
		}
	
	// Return the HTML for the visualization
	getHTML(){
		var cssTheme= (this.theme=="light") ? "light" : "dark";
		var cssAlign= "text-align: " + this.align + ";";
		if (this.align=="left"){
			cssAlign += "display: inline-block;"
		}
		var html = "<div class=\"dbv_container\" style=\"" + cssAlign +  "\"><input class=\"header " + cssTheme + " " + this.size +"\" id=\"" + this.id + "\" /><div class=\"dbv_label\">" + this.label + "</div></div>";
		return html;
	}
	
	
	// Get the next word. If we are centre aligning, pad with the right number of spaces.
	getNextWord(){
		try{
			var vals = this.words.shift();
			this.words.push(vals);
			this.caption = vals["word"];
			this.value = vals["value"];
			if(this.text_align=="center"){
				var paddingCount=Math.floor((this.num_characters - vals["word"].length)/2)
				if(paddingCount>0) {
					var padding = Array(paddingCount +1).join(" ")
					vals["word"] = padding + vals["word"]
				}
			}
			return vals['word'];
			
		} catch(err) {
			console.log("Error getting current word" + err);
			return "error!"
		}
	}
	
	
	// Get the OPTS for the visualization
	getOpts(){
		//Center align is just left with padding
		var align = this.text_align;
		if (align=="center") {align="left";}
		return {chars_preset: 'alphanum',
				align: align,
				width: this.num_characters,
				timing: this.timing
				//,transform: is_animated
			};
	}
	
	// Create a unique ID for the CSS selector
	createUUID() {
		var s = [];
		var hexDigits = "0123456789abcdef";
		for (var i = 0; i < 10; i++) {
			s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
		}
		var uuid = s.join("");
		return "db_" + uuid;
	}
	
	
		
		start(){
			window.jQuery("#" + this.id).flapper(this.getOpts());
			$("#" + this.id).val(this.getNextWord()).change();
			this.setTokens();
			var thisObj = this;	
					
			if(this.auto_refresh){
				thisObj.interval_handler = window.setInterval(function(){
					//Apoptosis:
					if($("#" + thisObj.id).length==0){
						window.clearInterval(thisObj.interval_handler);
					}else{
						if(thisObj.words.length == 1) {
							$("#" + thisObj.id).val('').change();	
						}
						$("#" + thisObj.id).val(thisObj.getNextWord()).change();
						thisObj.setTokens();
					}
				}, this.auto_refresh_period * 1000);
			}
			
			
		}
	
	
		setTokens(){
			this._setToken(this.token_word,this.caption);
			this._setToken(this.token_id,this.value);
		}
		
		_setToken(name, value) {
			var defaultTokenModel = this.mvc.Components.get('default');
			if (defaultTokenModel) {
				defaultTokenModel.set(name, value);
			}
			var submittedTokenModel = this.mvc.Components.get('submitted');
			if (submittedTokenModel) {
				submittedTokenModel.set(name, value);
			}
		}
	
}

module.exports =  departures_board;
